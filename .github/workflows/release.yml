# .github/workflows/release.yml
name: Release
on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build-web-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: |
            - recursive: true
              args: [--frozen-lockfile]
      - name: Build web app
        run: pnpm --filter @fleetops/web build
      - name: Archive dist
        run: zip -r web-dist-${GITHUB_REF_NAME}.zip apps/web/dist
      - name: Create or update release and upload web build
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tag="${GITHUB_REF_NAME}"
          gh release view "$tag" >/dev/null 2>&1 || gh release create "$tag" --notes-from-tag --latest --verify-tag
          gh release upload "$tag" "web-dist-${GITHUB_REF_NAME}.zip" --clobber

  build-server-and-attach:
    runs-on: ubuntu-latest
    needs: build-web-and-release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: |
            - recursive: true
              args: [--frozen-lockfile]

      # A) Bundle server to a single JS using ncc (CommonJS output)
      - name: Bundle server with ncc
        run: |
          pnpm dlx @vercel/ncc@latest build apps/server/src/index.ts -o apps/server/bundle
          node -e "require('fs').writeFileSync('RUN-README.txt', 'Run: node index.js\nEnvironment: set PORT, CORS if needed\n')"
          cp RUN-README.txt apps/server/bundle/

      - name: Tarball the ncc bundle
        run: |
          tar -czf server-ncc-${GITHUB_REF_NAME}.tar.gz -C apps/server/bundle .

      - name: Upload tarball to the release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tag="${GITHUB_REF_NAME}"
          gh release upload "$tag" "server-ncc-${GITHUB_REF_NAME}.tar.gz" --clobber

      # B) OPTIONAL: Build a Linux executable using Node SEA
      # SEA needs a single CommonJS entry file. ncc already produced apps/server/bundle/index.js.
      - name: Build SEA binary
        run: |
          cat > sea-config.json <<'JSON'
          {
            "main": "apps/server/bundle/index.js",
            "output": "sea-prep.blob",
            "disableExperimentalSEAWarning": true,
            "useCodeCache": false,
            "useSnapshot": false
          }
          JSON

          # Generate the SEA blob
          node --experimental-sea-config sea-config.json

          # Copy the Node binary and inject the blob using postject
          cp "$(command -v node)" fleetops-server
          npx -y postject fleetops-server NODE_SEA_BLOB sea-prep.blob \
            --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2

          chmod +x fleetops-server
      - name: Upload SEA binary to the release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tag="${GITHUB_REF_NAME}"
          gh release upload "$tag" fleetops-server --clobber

  # build-and-release:
    # runs-on: ubuntu-latest
    # steps:
      # - uses: actions/checkout@v4
        # with:
          # fetch-depth: 0

      # - uses: actions/setup-node@v4
        # with:
          # node-version: 22
          # cache: pnpm
          # cache-dependency-path: pnpm-lock.yaml

      # - uses: pnpm/action-setup@v4
        # with:
          # version: 10
          # run_install: |
            # - recursive: true
              # args: [--frozen-lockfile]

      # - name: Build web app
        # run: pnpm --filter @fleetops/web build

      # - name: Archive dist
        # run: |
          # zip -r web-dist-${GITHUB_REF_NAME}.zip apps/web/dist

      # - name: Create or update release and upload artifact
        # env:
          # GH_TOKEN: ${{ github.token }}
        # run: |
          # tag="${GITHUB_REF_NAME}"
          # # create release if it does not exist yet
          # gh release view "$tag" >/dev/null 2>&1 || gh release create "$tag" --notes-from-tag --latest --verify-tag
          # # upload the zipped web build
          # gh release upload "$tag" "web-dist-${GITHUB_REF_NAME}.zip" --clobber

  # release:
    # runs-on: ubuntu-latest
    # steps:
      # - uses: actions/checkout@v4
        # with:
          # fetch-depth: 0  # ensure the tag and history are present

      # # gh is preinstalled on GitHub-hosted runners
      # # authenticate gh with the workflow token
      # - name: Create GitHub Release
        # env:
          # GH_TOKEN: ${{ github.token }}
        # run: |
          # tag="${GITHUB_REF_NAME}"

          # # Option A - auto-generate notes from commits and PRs
          # gh release create "$tag" --generate-notes --latest --verify-tag

          # # Option B - OR use your annotated tag message as notes
          # # gh release create "$tag" --notes-from-tag --latest --verify-tag

          # # Optional: upload build artifacts if you produce any
          # # gh release upload "$tag" dist/** --clobber
